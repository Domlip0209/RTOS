
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003360  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003548  08003548  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08003548  08003548  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003548  08003548  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010bc  200000a0  080035f0  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000115c  080035f0  0002115c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001074e  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab6  00000000  00000000  00030817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00034310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f67  00000000  00000000  00035238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010eba  00000000  00000000  0004e19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a9c  00000000  00000000  0005f059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004594  00000000  00000000  000f0b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08003458 	.word	0x08003458

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08003458 	.word	0x08003458

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	200000c4 	.word	0x200000c4
 800017c:	20000178 	.word	0x20000178

08000180 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08e      	sub	sp, #56	; 0x38
 8000184:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LED */
  osThreadDef(LED, blink, osPriorityNormal, 0, 128);
 8000186:	4b14      	ldr	r3, [pc, #80]	; (80001d8 <MX_FREERTOS_Init+0x58>)
 8000188:	f107 041c 	add.w	r4, r7, #28
 800018c:	461d      	mov	r5, r3
 800018e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000192:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 800019a:	f107 031c 	add.w	r3, r7, #28
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 fe87 	bl	8001eb4 <osThreadCreate>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a0c      	ldr	r2, [pc, #48]	; (80001dc <MX_FREERTOS_Init+0x5c>)
 80001aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <MX_FREERTOS_Init+0x60>)
 80001ae:	463c      	mov	r4, r7
 80001b0:	461d      	mov	r5, r3
 80001b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80001be:	463b      	mov	r3, r7
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fe76 	bl	8001eb4 <osThreadCreate>
 80001c8:	4603      	mov	r3, r0
 80001ca:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <MX_FREERTOS_Init+0x64>)
 80001cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80001ce:	bf00      	nop
 80001d0:	3738      	adds	r7, #56	; 0x38
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bdb0      	pop	{r4, r5, r7, pc}
 80001d6:	bf00      	nop
 80001d8:	08003480 	.word	0x08003480
 80001dc:	200000bc 	.word	0x200000bc
 80001e0:	0800349c 	.word	0x0800349c
 80001e4:	200000c0 	.word	0x200000c0

080001e8 <blink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blink */
void blink(void const * argument)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001f0:	2120      	movs	r1, #32
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <blink+0x20>)
 80001f4:	f000 fd50 	bl	8000c98 <HAL_GPIO_TogglePin>
	  osDelay(delay);
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <blink+0x24>)
 80001fa:	881b      	ldrh	r3, [r3, #0]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fea4 	bl	8001f4c <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000204:	e7f4      	b.n	80001f0 <blink+0x8>
 8000206:	bf00      	nop
 8000208:	40010800 	.word	0x40010800
 800020c:	20000000 	.word	0x20000000

08000210 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000214:	b086      	sub	sp, #24
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	static char init[] = "Start of the program, the delay is 1s";
	uint8_t buf_len = 0xFF;
 800021a:	23ff      	movs	r3, #255	; 0xff
 800021c:	75fb      	strb	r3, [r7, #23]
	char buff[buf_len];
 800021e:	7df9      	ldrb	r1, [r7, #23]
 8000220:	460b      	mov	r3, r1
 8000222:	3b01      	subs	r3, #1
 8000224:	613b      	str	r3, [r7, #16]
 8000226:	b2cb      	uxtb	r3, r1
 8000228:	2200      	movs	r2, #0
 800022a:	4698      	mov	r8, r3
 800022c:	4691      	mov	r9, r2
 800022e:	f04f 0200 	mov.w	r2, #0
 8000232:	f04f 0300 	mov.w	r3, #0
 8000236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800023a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800023e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000242:	b2cb      	uxtb	r3, r1
 8000244:	2200      	movs	r2, #0
 8000246:	461c      	mov	r4, r3
 8000248:	4615      	mov	r5, r2
 800024a:	f04f 0200 	mov.w	r2, #0
 800024e:	f04f 0300 	mov.w	r3, #0
 8000252:	00eb      	lsls	r3, r5, #3
 8000254:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000258:	00e2      	lsls	r2, r4, #3
 800025a:	460b      	mov	r3, r1
 800025c:	3307      	adds	r3, #7
 800025e:	08db      	lsrs	r3, r3, #3
 8000260:	00db      	lsls	r3, r3, #3
 8000262:	ebad 0d03 	sub.w	sp, sp, r3
 8000266:	466b      	mov	r3, sp
 8000268:	3300      	adds	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit(&huart2, (uint8_t*) &init, sizeof(init), 500);
 800026c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000270:	2226      	movs	r2, #38	; 0x26
 8000272:	490b      	ldr	r1, [pc, #44]	; (80002a0 <StartTask02+0x90>)
 8000274:	480b      	ldr	r0, [pc, #44]	; (80002a4 <StartTask02+0x94>)
 8000276:	f001 fc2c 	bl	8001ad2 <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	  if(HAL_UART_Receive_IT(&huart2, (uint8_t*) &buff, buf_len) == HAL_OK)
 800027a:	7dfb      	ldrb	r3, [r7, #23]
 800027c:	b29b      	uxth	r3, r3
 800027e:	461a      	mov	r2, r3
 8000280:	68f9      	ldr	r1, [r7, #12]
 8000282:	4808      	ldr	r0, [pc, #32]	; (80002a4 <StartTask02+0x94>)
 8000284:	f001 fcb7 	bl	8001bf6 <HAL_UART_Receive_IT>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d103      	bne.n	8000296 <StartTask02+0x86>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800028e:	2120      	movs	r1, #32
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <StartTask02+0x98>)
 8000292:	f000 fd01 	bl	8000c98 <HAL_GPIO_TogglePin>
	  }
			  osDelay(1000);
 8000296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029a:	f001 fe57 	bl	8001f4c <osDelay>
	  if(HAL_UART_Receive_IT(&huart2, (uint8_t*) &buff, buf_len) == HAL_OK)
 800029e:	e7ec      	b.n	800027a <StartTask02+0x6a>
 80002a0:	20000004 	.word	0x20000004
 80002a4:	200003c0 	.word	0x200003c0
 80002a8:	40010800 	.word	0x40010800

080002ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <MX_GPIO_Init+0xcc>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a2c      	ldr	r2, [pc, #176]	; (8000378 <MX_GPIO_Init+0xcc>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b2a      	ldr	r3, [pc, #168]	; (8000378 <MX_GPIO_Init+0xcc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0310 	and.w	r3, r3, #16
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d8:	4b27      	ldr	r3, [pc, #156]	; (8000378 <MX_GPIO_Init+0xcc>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a26      	ldr	r2, [pc, #152]	; (8000378 <MX_GPIO_Init+0xcc>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b24      	ldr	r3, [pc, #144]	; (8000378 <MX_GPIO_Init+0xcc>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	4b21      	ldr	r3, [pc, #132]	; (8000378 <MX_GPIO_Init+0xcc>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a20      	ldr	r2, [pc, #128]	; (8000378 <MX_GPIO_Init+0xcc>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0xcc>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_GPIO_Init+0xcc>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a1a      	ldr	r2, [pc, #104]	; (8000378 <MX_GPIO_Init+0xcc>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_GPIO_Init+0xcc>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2120      	movs	r1, #32
 8000324:	4815      	ldr	r0, [pc, #84]	; (800037c <MX_GPIO_Init+0xd0>)
 8000326:	f000 fc9f 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800032a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_GPIO_Init+0xd4>)
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4811      	ldr	r0, [pc, #68]	; (8000384 <MX_GPIO_Init+0xd8>)
 8000340:	f000 fb0e 	bl	8000960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000344:	2320      	movs	r3, #32
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2301      	movs	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	2302      	movs	r3, #2
 8000352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	4808      	ldr	r0, [pc, #32]	; (800037c <MX_GPIO_Init+0xd0>)
 800035c:	f000 fb00 	bl	8000960 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2105      	movs	r1, #5
 8000364:	2028      	movs	r0, #40	; 0x28
 8000366:	f000 fad0 	bl	800090a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800036a:	2028      	movs	r0, #40	; 0x28
 800036c:	f000 fae9 	bl	8000942 <HAL_NVIC_EnableIRQ>

}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	40010800 	.word	0x40010800
 8000380:	10110000 	.word	0x10110000
 8000384:	40011000 	.word	0x40011000

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038c:	f000 f9d6 	bl	800073c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000390:	f000 f809 	bl	80003a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000394:	f7ff ff8a 	bl	80002ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000398:	f000 f942 	bl	8000620 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800039c:	f7ff fef0 	bl	8000180 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80003a0:	f001 fd81 	bl	8001ea6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x1c>

080003a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b090      	sub	sp, #64	; 0x40
 80003aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ac:	f107 0318 	add.w	r3, r7, #24
 80003b0:	2228      	movs	r2, #40	; 0x28
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f002 ff89 	bl	80032cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c8:	2302      	movs	r3, #2
 80003ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	2301      	movs	r3, #1
 80003ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d0:	2310      	movs	r3, #16
 80003d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	2302      	movs	r3, #2
 80003d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003d8:	2300      	movs	r3, #0
 80003da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003dc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fc92 	bl	8000d10 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003f2:	f000 f82b 	bl	800044c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2102      	movs	r1, #2
 8000410:	4618      	mov	r0, r3
 8000412:	f000 feff 	bl	8001214 <HAL_RCC_ClockConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800041c:	f000 f816 	bl	800044c <Error_Handler>
  }
}
 8000420:	bf00      	nop
 8000422:	3740      	adds	r7, #64	; 0x40
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d101      	bne.n	800043e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800043a:	f000 f995 	bl	8000768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40000800 	.word	0x40000800

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	e7fe      	b.n	8000454 <Error_Handler+0x8>
	...

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045e:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <HAL_MspInit+0x68>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a17      	ldr	r2, [pc, #92]	; (80004c0 <HAL_MspInit+0x68>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <HAL_MspInit+0x68>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_MspInit+0x68>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <HAL_MspInit+0x68>)
 800047c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000480:	61d3      	str	r3, [r2, #28]
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <HAL_MspInit+0x68>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	210f      	movs	r1, #15
 8000492:	f06f 0001 	mvn.w	r0, #1
 8000496:	f000 fa38 	bl	800090a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <HAL_MspInit+0x6c>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <HAL_MspInit+0x6c>)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010000 	.word	0x40010000

080004c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08e      	sub	sp, #56	; 0x38
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004d4:	2300      	movs	r3, #0
 80004d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004d8:	2300      	movs	r3, #0
 80004da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004de:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <HAL_InitTick+0xe8>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a33      	ldr	r2, [pc, #204]	; (80005b0 <HAL_InitTick+0xe8>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <HAL_InitTick+0xe8>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004f6:	f107 0210 	add.w	r2, r7, #16
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4611      	mov	r1, r2
 8000500:	4618      	mov	r0, r3
 8000502:	f001 f801 	bl	8001508 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000506:	6a3b      	ldr	r3, [r7, #32]
 8000508:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800050a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800050c:	2b00      	cmp	r3, #0
 800050e:	d103      	bne.n	8000518 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000510:	f000 ffd2 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
 8000514:	6378      	str	r0, [r7, #52]	; 0x34
 8000516:	e004      	b.n	8000522 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000518:	f000 ffce 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
 800051c:	4603      	mov	r3, r0
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000524:	4a23      	ldr	r2, [pc, #140]	; (80005b4 <HAL_InitTick+0xec>)
 8000526:	fba2 2303 	umull	r2, r3, r2, r3
 800052a:	0c9b      	lsrs	r3, r3, #18
 800052c:	3b01      	subs	r3, #1
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000530:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <HAL_InitTick+0xf0>)
 8000532:	4a22      	ldr	r2, [pc, #136]	; (80005bc <HAL_InitTick+0xf4>)
 8000534:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <HAL_InitTick+0xf0>)
 8000538:	f240 32e7 	movw	r2, #999	; 0x3e7
 800053c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <HAL_InitTick+0xf0>)
 8000540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000542:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <HAL_InitTick+0xf0>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <HAL_InitTick+0xf0>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <HAL_InitTick+0xf0>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <HAL_InitTick+0xf0>)
 8000558:	f001 f824 	bl	80015a4 <HAL_TIM_Base_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000566:	2b00      	cmp	r3, #0
 8000568:	d11b      	bne.n	80005a2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800056a:	4813      	ldr	r0, [pc, #76]	; (80005b8 <HAL_InitTick+0xf0>)
 800056c:	f001 f872 	bl	8001654 <HAL_TIM_Base_Start_IT>
 8000570:	4603      	mov	r3, r0
 8000572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800057a:	2b00      	cmp	r3, #0
 800057c:	d111      	bne.n	80005a2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800057e:	201e      	movs	r0, #30
 8000580:	f000 f9df 	bl	8000942 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b0f      	cmp	r3, #15
 8000588:	d808      	bhi.n	800059c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800058a:	2200      	movs	r2, #0
 800058c:	6879      	ldr	r1, [r7, #4]
 800058e:	201e      	movs	r0, #30
 8000590:	f000 f9bb 	bl	800090a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_InitTick+0xf8>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	e002      	b.n	80005a2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3738      	adds	r7, #56	; 0x38
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000
 80005b4:	431bde83 	.word	0x431bde83
 80005b8:	20000378 	.word	0x20000378
 80005bc:	40000800 	.word	0x40000800
 80005c0:	20000030 	.word	0x20000030

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler+0x4>

080005ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <MemManage_Handler+0x4>

080005d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
	...

080005f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <TIM4_IRQHandler+0x10>)
 80005f6:	f001 f87f 	bl	80016f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000378 	.word	0x20000378

08000604 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000608:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800060c:	f000 fb5e 	bl	8000ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000658:	f001 f9ee 	bl	8001a38 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000662:	f7ff fef3 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200003c0 	.word	0x200003c0
 8000670:	40004400 	.word	0x40004400

08000674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <HAL_UART_MspInit+0x70>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d123      	bne.n	80006dc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_UART_MspInit+0x74>)
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <HAL_UART_MspInit+0x74>)
 800069a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069e:	61d3      	str	r3, [r2, #28]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_UART_MspInit+0x74>)
 80006a2:	69db      	ldr	r3, [r3, #28]
 80006a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_UART_MspInit+0x74>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <HAL_UART_MspInit+0x74>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <HAL_UART_MspInit+0x74>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006c4:	230c      	movs	r3, #12
 80006c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_UART_MspInit+0x78>)
 80006d8:	f000 f942 	bl	8000960 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40004400 	.word	0x40004400
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010800 	.word	0x40010800

080006f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006f2:	490d      	ldr	r1, [pc, #52]	; (8000728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000708:	4c0a      	ldr	r4, [pc, #40]	; (8000734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000716:	f7ff ff7d 	bl	8000614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071a:	f002 fdb1 	bl	8003280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff fe33 	bl	8000388 <main>
  bx lr
 8000722:	4770      	bx	lr
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800072c:	08003550 	.word	0x08003550
  ldr r2, =_sbss
 8000730:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000734:	2000115c 	.word	0x2000115c

08000738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_2_IRQHandler>
	...

0800073c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_Init+0x28>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_Init+0x28>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f8d1 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000752:	200f      	movs	r0, #15
 8000754:	f7ff feb8 	bl	80004c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000758:	f7ff fe7e 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40022000 	.word	0x40022000

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x20>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <HAL_IncTick+0x20>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000034 	.word	0x20000034
 8000788:	20000404 	.word	0x20000404

0800078c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b02      	ldr	r3, [pc, #8]	; (800079c <HAL_GetTick+0x10>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000404 	.word	0x20000404

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	db0b      	blt.n	800082e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <__NVIC_EnableIRQ+0x34>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	095b      	lsrs	r3, r3, #5
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff4f 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff64 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ffb2 	bl	8000890 <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff81 	bl	800083c <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff57 	bl	8000804 <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b480      	push	{r7}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000972:	e169      	b.n	8000c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000974:	2201      	movs	r2, #1
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	429a      	cmp	r2, r3
 800098e:	f040 8158 	bne.w	8000c42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a9a      	ldr	r2, [pc, #616]	; (8000c00 <HAL_GPIO_Init+0x2a0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d05e      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 800099c:	4a98      	ldr	r2, [pc, #608]	; (8000c00 <HAL_GPIO_Init+0x2a0>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d875      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009a2:	4a98      	ldr	r2, [pc, #608]	; (8000c04 <HAL_GPIO_Init+0x2a4>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d058      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009a8:	4a96      	ldr	r2, [pc, #600]	; (8000c04 <HAL_GPIO_Init+0x2a4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d86f      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009ae:	4a96      	ldr	r2, [pc, #600]	; (8000c08 <HAL_GPIO_Init+0x2a8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d052      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009b4:	4a94      	ldr	r2, [pc, #592]	; (8000c08 <HAL_GPIO_Init+0x2a8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d869      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009ba:	4a94      	ldr	r2, [pc, #592]	; (8000c0c <HAL_GPIO_Init+0x2ac>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d04c      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009c0:	4a92      	ldr	r2, [pc, #584]	; (8000c0c <HAL_GPIO_Init+0x2ac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d863      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009c6:	4a92      	ldr	r2, [pc, #584]	; (8000c10 <HAL_GPIO_Init+0x2b0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d046      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009cc:	4a90      	ldr	r2, [pc, #576]	; (8000c10 <HAL_GPIO_Init+0x2b0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d85d      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009d2:	2b12      	cmp	r3, #18
 80009d4:	d82a      	bhi.n	8000a2c <HAL_GPIO_Init+0xcc>
 80009d6:	2b12      	cmp	r3, #18
 80009d8:	d859      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <HAL_GPIO_Init+0x80>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	08000a5b 	.word	0x08000a5b
 80009e4:	08000a35 	.word	0x08000a35
 80009e8:	08000a47 	.word	0x08000a47
 80009ec:	08000a89 	.word	0x08000a89
 80009f0:	08000a8f 	.word	0x08000a8f
 80009f4:	08000a8f 	.word	0x08000a8f
 80009f8:	08000a8f 	.word	0x08000a8f
 80009fc:	08000a8f 	.word	0x08000a8f
 8000a00:	08000a8f 	.word	0x08000a8f
 8000a04:	08000a8f 	.word	0x08000a8f
 8000a08:	08000a8f 	.word	0x08000a8f
 8000a0c:	08000a8f 	.word	0x08000a8f
 8000a10:	08000a8f 	.word	0x08000a8f
 8000a14:	08000a8f 	.word	0x08000a8f
 8000a18:	08000a8f 	.word	0x08000a8f
 8000a1c:	08000a8f 	.word	0x08000a8f
 8000a20:	08000a8f 	.word	0x08000a8f
 8000a24:	08000a3d 	.word	0x08000a3d
 8000a28:	08000a51 	.word	0x08000a51
 8000a2c:	4a79      	ldr	r2, [pc, #484]	; (8000c14 <HAL_GPIO_Init+0x2b4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d013      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a32:	e02c      	b.n	8000a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	623b      	str	r3, [r7, #32]
          break;
 8000a3a:	e029      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	3304      	adds	r3, #4
 8000a42:	623b      	str	r3, [r7, #32]
          break;
 8000a44:	e024      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	3308      	adds	r3, #8
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e01f      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	330c      	adds	r3, #12
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	e01a      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a62:	2304      	movs	r3, #4
 8000a64:	623b      	str	r3, [r7, #32]
          break;
 8000a66:	e013      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d105      	bne.n	8000a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a70:	2308      	movs	r3, #8
 8000a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	611a      	str	r2, [r3, #16]
          break;
 8000a7a:	e009      	b.n	8000a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	615a      	str	r2, [r3, #20]
          break;
 8000a86:	e003      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
          break;
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          break;
 8000a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	2bff      	cmp	r3, #255	; 0xff
 8000a94:	d801      	bhi.n	8000a9a <HAL_GPIO_Init+0x13a>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	e001      	b.n	8000a9e <HAL_GPIO_Init+0x13e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	2bff      	cmp	r3, #255	; 0xff
 8000aa4:	d802      	bhi.n	8000aac <HAL_GPIO_Init+0x14c>
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	e002      	b.n	8000ab2 <HAL_GPIO_Init+0x152>
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	3b08      	subs	r3, #8
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	210f      	movs	r1, #15
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	6a39      	ldr	r1, [r7, #32]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	431a      	orrs	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 80b1 	beq.w	8000c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae0:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a4c      	ldr	r2, [pc, #304]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af8:	4a48      	ldr	r2, [pc, #288]	; (8000c1c <HAL_GPIO_Init+0x2bc>)
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	3302      	adds	r3, #2
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	220f      	movs	r2, #15
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a40      	ldr	r2, [pc, #256]	; (8000c20 <HAL_GPIO_Init+0x2c0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d013      	beq.n	8000b4c <HAL_GPIO_Init+0x1ec>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3f      	ldr	r2, [pc, #252]	; (8000c24 <HAL_GPIO_Init+0x2c4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d00d      	beq.n	8000b48 <HAL_GPIO_Init+0x1e8>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3e      	ldr	r2, [pc, #248]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d007      	beq.n	8000b44 <HAL_GPIO_Init+0x1e4>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a3d      	ldr	r2, [pc, #244]	; (8000c2c <HAL_GPIO_Init+0x2cc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d101      	bne.n	8000b40 <HAL_GPIO_Init+0x1e0>
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b40:	2304      	movs	r3, #4
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b5e:	492f      	ldr	r1, [pc, #188]	; (8000c1c <HAL_GPIO_Init+0x2bc>)
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	492c      	ldr	r1, [pc, #176]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	600b      	str	r3, [r1, #0]
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4928      	ldr	r1, [pc, #160]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4922      	ldr	r1, [pc, #136]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	491e      	ldr	r1, [pc, #120]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	4918      	ldr	r1, [pc, #96]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	608b      	str	r3, [r1, #8]
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	4914      	ldr	r1, [pc, #80]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d021      	beq.n	8000c34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	490e      	ldr	r1, [pc, #56]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60cb      	str	r3, [r1, #12]
 8000bfc:	e021      	b.n	8000c42 <HAL_GPIO_Init+0x2e2>
 8000bfe:	bf00      	nop
 8000c00:	10320000 	.word	0x10320000
 8000c04:	10310000 	.word	0x10310000
 8000c08:	10220000 	.word	0x10220000
 8000c0c:	10210000 	.word	0x10210000
 8000c10:	10120000 	.word	0x10120000
 8000c14:	10110000 	.word	0x10110000
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010000 	.word	0x40010000
 8000c20:	40010800 	.word	0x40010800
 8000c24:	40010c00 	.word	0x40010c00
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40011400 	.word	0x40011400
 8000c30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_GPIO_Init+0x304>)
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4909      	ldr	r1, [pc, #36]	; (8000c64 <HAL_GPIO_Init+0x304>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	3301      	adds	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f47f ae8e 	bne.w	8000974 <HAL_GPIO_Init+0x14>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	372c      	adds	r7, #44	; 0x2c
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40010400 	.word	0x40010400

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c84:	e003      	b.n	8000c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	041a      	lsls	r2, r3, #16
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	611a      	str	r2, [r3, #16]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	041a      	lsls	r2, r3, #16
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43d9      	mvns	r1, r3
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	400b      	ands	r3, r1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	611a      	str	r2, [r3, #16]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
	...

08000ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd8:	695a      	ldr	r2, [r3, #20]
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f806 	bl	8000cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e272      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 8087 	beq.w	8000e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d30:	4b92      	ldr	r3, [pc, #584]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d00c      	beq.n	8000d56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d3c:	4b8f      	ldr	r3, [pc, #572]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d112      	bne.n	8000d6e <HAL_RCC_OscConfig+0x5e>
 8000d48:	4b8c      	ldr	r3, [pc, #560]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d54:	d10b      	bne.n	8000d6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d56:	4b89      	ldr	r3, [pc, #548]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d06c      	beq.n	8000e3c <HAL_RCC_OscConfig+0x12c>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d168      	bne.n	8000e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e24c      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d76:	d106      	bne.n	8000d86 <HAL_RCC_OscConfig+0x76>
 8000d78:	4b80      	ldr	r3, [pc, #512]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a7f      	ldr	r2, [pc, #508]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e02e      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10c      	bne.n	8000da8 <HAL_RCC_OscConfig+0x98>
 8000d8e:	4b7b      	ldr	r3, [pc, #492]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a7a      	ldr	r2, [pc, #488]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b78      	ldr	r3, [pc, #480]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a77      	ldr	r2, [pc, #476]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e01d      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db0:	d10c      	bne.n	8000dcc <HAL_RCC_OscConfig+0xbc>
 8000db2:	4b72      	ldr	r3, [pc, #456]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a71      	ldr	r2, [pc, #452]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b6f      	ldr	r3, [pc, #444]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a6e      	ldr	r2, [pc, #440]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e00b      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000dcc:	4b6b      	ldr	r3, [pc, #428]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a6a      	ldr	r2, [pc, #424]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b68      	ldr	r3, [pc, #416]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a67      	ldr	r2, [pc, #412]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d013      	beq.n	8000e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fcce 	bl	800078c <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fcca 	bl	800078c <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e200      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e06:	4b5d      	ldr	r3, [pc, #372]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f0      	beq.n	8000df4 <HAL_RCC_OscConfig+0xe4>
 8000e12:	e014      	b.n	8000e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fcba 	bl	800078c <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fcb6 	bl	800078c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e1ec      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2e:	4b53      	ldr	r3, [pc, #332]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x10c>
 8000e3a:	e000      	b.n	8000e3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d063      	beq.n	8000f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00b      	beq.n	8000e6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e56:	4b49      	ldr	r3, [pc, #292]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d11c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x18c>
 8000e62:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d116      	bne.n	8000e9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6e:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d005      	beq.n	8000e86 <HAL_RCC_OscConfig+0x176>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d001      	beq.n	8000e86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e1c0      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e86:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4939      	ldr	r1, [pc, #228]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9a:	e03a      	b.n	8000f12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d020      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <HAL_RCC_OscConfig+0x270>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fc6f 	bl	800078c <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fc6b 	bl	800078c <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e1a1      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4927      	ldr	r1, [pc, #156]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]
 8000ee4:	e015      	b.n	8000f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc4e 	bl	800078c <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fc4a 	bl	800078c <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e180      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d03a      	beq.n	8000f94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d019      	beq.n	8000f5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_RCC_OscConfig+0x274>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fc2e 	bl	800078c <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f34:	f7ff fc2a 	bl	800078c <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e160      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 fb08 	bl	8001568 <RCC_Delay>
 8000f58:	e01c      	b.n	8000f94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fc14 	bl	800078c <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f66:	e00f      	b.n	8000f88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f68:	f7ff fc10 	bl	800078c <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d908      	bls.n	8000f88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e146      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	42420000 	.word	0x42420000
 8000f84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	4b92      	ldr	r3, [pc, #584]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1e9      	bne.n	8000f68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80a6 	beq.w	80010ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa6:	4b8b      	ldr	r3, [pc, #556]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10d      	bne.n	8000fce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b88      	ldr	r3, [pc, #544]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a87      	ldr	r2, [pc, #540]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b85      	ldr	r3, [pc, #532]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fce:	4b82      	ldr	r3, [pc, #520]	; (80011d8 <HAL_RCC_OscConfig+0x4c8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fda:	4b7f      	ldr	r3, [pc, #508]	; (80011d8 <HAL_RCC_OscConfig+0x4c8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a7e      	ldr	r2, [pc, #504]	; (80011d8 <HAL_RCC_OscConfig+0x4c8>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fbd1 	bl	800078c <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fee:	f7ff fbcd 	bl	800078c <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e103      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001000:	4b75      	ldr	r3, [pc, #468]	; (80011d8 <HAL_RCC_OscConfig+0x4c8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d106      	bne.n	8001022 <HAL_RCC_OscConfig+0x312>
 8001014:	4b6f      	ldr	r3, [pc, #444]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a6e      	ldr	r2, [pc, #440]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6213      	str	r3, [r2, #32]
 8001020:	e02d      	b.n	800107e <HAL_RCC_OscConfig+0x36e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0x334>
 800102a:	4b6a      	ldr	r3, [pc, #424]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a69      	ldr	r2, [pc, #420]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b67      	ldr	r3, [pc, #412]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a66      	ldr	r2, [pc, #408]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
 8001042:	e01c      	b.n	800107e <HAL_RCC_OscConfig+0x36e>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b05      	cmp	r3, #5
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0x356>
 800104c:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4a60      	ldr	r2, [pc, #384]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6213      	str	r3, [r2, #32]
 8001058:	4b5e      	ldr	r3, [pc, #376]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a5d      	ldr	r2, [pc, #372]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6213      	str	r3, [r2, #32]
 8001064:	e00b      	b.n	800107e <HAL_RCC_OscConfig+0x36e>
 8001066:	4b5b      	ldr	r3, [pc, #364]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a5a      	ldr	r2, [pc, #360]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	4b58      	ldr	r3, [pc, #352]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a57      	ldr	r2, [pc, #348]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	f023 0304 	bic.w	r3, r3, #4
 800107c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d015      	beq.n	80010b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001086:	f7ff fb81 	bl	800078c <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108c:	e00a      	b.n	80010a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108e:	f7ff fb7d 	bl	800078c <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f241 3288 	movw	r2, #5000	; 0x1388
 800109c:	4293      	cmp	r3, r2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e0b1      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a4:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0ee      	beq.n	800108e <HAL_RCC_OscConfig+0x37e>
 80010b0:	e014      	b.n	80010dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b2:	f7ff fb6b 	bl	800078c <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b8:	e00a      	b.n	80010d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ba:	f7ff fb67 	bl	800078c <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e09b      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d0:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1ee      	bne.n	80010ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d105      	bne.n	80010ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e2:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a3b      	ldr	r2, [pc, #236]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8087 	beq.w	8001206 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d061      	beq.n	80011c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d146      	bne.n	800119a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_RCC_OscConfig+0x4cc>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fb3b 	bl	800078c <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111a:	f7ff fb37 	bl	800078c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e06d      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f0      	bne.n	800111a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d108      	bne.n	8001154 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001142:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	4921      	ldr	r1, [pc, #132]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a19      	ldr	r1, [r3, #32]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	430b      	orrs	r3, r1
 8001166:	491b      	ldr	r1, [pc, #108]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_RCC_OscConfig+0x4cc>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff fb0b 	bl	800078c <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117a:	f7ff fb07 	bl	800078c <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e03d      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x46a>
 8001198:	e035      	b.n	8001206 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_RCC_OscConfig+0x4cc>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff faf4 	bl	800078c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a8:	f7ff faf0 	bl	800078c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e026      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x498>
 80011c6:	e01e      	b.n	8001206 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d107      	bne.n	80011e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e019      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40007000 	.word	0x40007000
 80011dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x500>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d106      	bne.n	8001202 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fe:	429a      	cmp	r2, r3
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e0d0      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001228:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d910      	bls.n	8001258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001236:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 0207 	bic.w	r2, r3, #7
 800123e:	4965      	ldr	r1, [pc, #404]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0b8      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800127a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001288:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a52      	ldr	r2, [pc, #328]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001292:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001294:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	494d      	ldr	r1, [pc, #308]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d040      	beq.n	8001334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d115      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e07f      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d107      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e073      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e2:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e06b      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f023 0203 	bic.w	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4936      	ldr	r1, [pc, #216]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001304:	f7ff fa42 	bl	800078c <HAL_GetTick>
 8001308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130a:	e00a      	b.n	8001322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130c:	f7ff fa3e 	bl	800078c <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	; 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e053      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 020c 	and.w	r2, r3, #12
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	429a      	cmp	r2, r3
 8001332:	d1eb      	bne.n	800130c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d210      	bcs.n	8001364 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 0207 	bic.w	r2, r3, #7
 800134a:	4922      	ldr	r1, [pc, #136]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e032      	b.n	80013ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4916      	ldr	r1, [pc, #88]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	490e      	ldr	r1, [pc, #56]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013a2:	f000 f821 	bl	80013e8 <HAL_RCC_GetSysClockFreq>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	490a      	ldr	r1, [pc, #40]	; (80013dc <HAL_RCC_ClockConfig+0x1c8>)
 80013b4:	5ccb      	ldrb	r3, [r1, r3]
 80013b6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_RCC_ClockConfig+0x1cc>)
 80013bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_ClockConfig+0x1d0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f880 	bl	80004c8 <HAL_InitTick>

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40022000 	.word	0x40022000
 80013d8:	40021000 	.word	0x40021000
 80013dc:	080034d0 	.word	0x080034d0
 80013e0:	2000002c 	.word	0x2000002c
 80013e4:	20000030 	.word	0x20000030

080013e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e8:	b490      	push	{r4, r7}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <HAL_RCC_GetSysClockFreq+0xac>)
 80013f0:	1d3c      	adds	r4, r7, #4
 80013f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013f8:	f240 2301 	movw	r3, #513	; 0x201
 80013fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b04      	cmp	r3, #4
 8001420:	d002      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x40>
 8001422:	2b08      	cmp	r3, #8
 8001424:	d003      	beq.n	800142e <HAL_RCC_GetSysClockFreq+0x46>
 8001426:	e02b      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_RCC_GetSysClockFreq+0xb4>)
 800142a:	623b      	str	r3, [r7, #32]
      break;
 800142c:	e02b      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	0c9b      	lsrs	r3, r3, #18
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3328      	adds	r3, #40	; 0x28
 8001438:	443b      	add	r3, r7
 800143a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800143e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d012      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb0>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	0c5b      	lsrs	r3, r3, #17
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	3328      	adds	r3, #40	; 0x28
 8001456:	443b      	add	r3, r7
 8001458:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800145c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001462:	fb03 f202 	mul.w	r2, r3, r2
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
 800146e:	e004      	b.n	800147a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	623b      	str	r3, [r7, #32]
      break;
 800147e:	e002      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001482:	623b      	str	r3, [r7, #32]
      break;
 8001484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001486:	6a3b      	ldr	r3, [r7, #32]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bc90      	pop	{r4, r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	080034b8 	.word	0x080034b8
 8001498:	40021000 	.word	0x40021000
 800149c:	007a1200 	.word	0x007a1200
 80014a0:	003d0900 	.word	0x003d0900

080014a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a8:	4b02      	ldr	r3, [pc, #8]	; (80014b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	2000002c 	.word	0x2000002c

080014b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014bc:	f7ff fff2 	bl	80014a4 <HAL_RCC_GetHCLKFreq>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	4903      	ldr	r1, [pc, #12]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ce:	5ccb      	ldrb	r3, [r1, r3]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	080034e0 	.word	0x080034e0

080014e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_RCC_GetHCLKFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	0adb      	lsrs	r3, r3, #11
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	4903      	ldr	r1, [pc, #12]	; (8001504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	080034e0 	.word	0x080034e0

08001508 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	220f      	movs	r2, #15
 8001516:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_RCC_GetClockConfig+0x58>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_RCC_GetClockConfig+0x58>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_GetClockConfig+0x58>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_RCC_GetClockConfig+0x58>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_RCC_GetClockConfig+0x5c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0207 	and.w	r2, r3, #7
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40022000 	.word	0x40022000

08001568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <RCC_Delay+0x34>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <RCC_Delay+0x38>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a5b      	lsrs	r3, r3, #9
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001584:	bf00      	nop
  }
  while (Delay --);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	60fa      	str	r2, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f9      	bne.n	8001584 <RCC_Delay+0x1c>
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	2000002c 	.word	0x2000002c
 80015a0:	10624dd3 	.word	0x10624dd3

080015a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e041      	b.n	800163a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f839 	bl	8001642 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3304      	adds	r3, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f000 f9b4 	bl	8001950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d001      	beq.n	800166c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e03a      	b.n	80016e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <HAL_TIM_Base_Start_IT+0x98>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00e      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001696:	d009      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d004      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d111      	bne.n	80016d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d010      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ce:	e007      	b.n	80016e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40000400 	.word	0x40000400
 80016f4:	40000800 	.word	0x40000800

080016f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b02      	cmp	r3, #2
 800170c:	d122      	bne.n	8001754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d11b      	bne.n	8001754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0202 	mvn.w	r2, #2
 8001724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f8ed 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 8001740:	e005      	b.n	800174e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8e0 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f8ef 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b04      	cmp	r3, #4
 8001760:	d122      	bne.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b04      	cmp	r3, #4
 800176e:	d11b      	bne.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0204 	mvn.w	r2, #4
 8001778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2202      	movs	r2, #2
 800177e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f8c3 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 8001794:	e005      	b.n	80017a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8b6 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8c5 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d122      	bne.n	80017fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d11b      	bne.n	80017fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0208 	mvn.w	r2, #8
 80017cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2204      	movs	r2, #4
 80017d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f899 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 80017e8:	e005      	b.n	80017f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f88c 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f89b 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b10      	cmp	r3, #16
 8001808:	d122      	bne.n	8001850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b10      	cmp	r3, #16
 8001816:	d11b      	bne.n	8001850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0210 	mvn.w	r2, #16
 8001820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2208      	movs	r2, #8
 8001826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f86f 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 800183c:	e005      	b.n	800184a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f862 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f871 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10e      	bne.n	800187c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0201 	mvn.w	r2, #1
 8001874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe fdd6 	bl	8000428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	2b80      	cmp	r3, #128	; 0x80
 8001888:	d10e      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	d107      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f8bf 	bl	8001a26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	d10e      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b40      	cmp	r3, #64	; 0x40
 80018c2:	d107      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f835 	bl	800193e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d10e      	bne.n	8001900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d107      	bne.n	8001900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0220 	mvn.w	r2, #32
 80018f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f88a 	bl	8001a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <TIM_Base_SetConfig+0xb8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00b      	beq.n	8001980 <TIM_Base_SetConfig+0x30>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196e:	d007      	beq.n	8001980 <TIM_Base_SetConfig+0x30>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <TIM_Base_SetConfig+0xbc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d003      	beq.n	8001980 <TIM_Base_SetConfig+0x30>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a25      	ldr	r2, [pc, #148]	; (8001a10 <TIM_Base_SetConfig+0xc0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d108      	bne.n	8001992 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a1c      	ldr	r2, [pc, #112]	; (8001a08 <TIM_Base_SetConfig+0xb8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00b      	beq.n	80019b2 <TIM_Base_SetConfig+0x62>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a0:	d007      	beq.n	80019b2 <TIM_Base_SetConfig+0x62>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <TIM_Base_SetConfig+0xbc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d003      	beq.n	80019b2 <TIM_Base_SetConfig+0x62>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <TIM_Base_SetConfig+0xc0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d108      	bne.n	80019c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <TIM_Base_SetConfig+0xb8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d103      	bne.n	80019f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	615a      	str	r2, [r3, #20]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	40000800 	.word	0x40000800

08001a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e03f      	b.n	8001aca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fe08 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2224      	movs	r2, #36	; 0x24
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f96d 	bl	8001d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08a      	sub	sp, #40	; 0x28
 8001ad6:	af02      	add	r7, sp, #8
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	d17c      	bne.n	8001bec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_UART_Transmit+0x2c>
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e075      	b.n	8001bee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_UART_Transmit+0x3e>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e06e      	b.n	8001bee <HAL_UART_Transmit+0x11c>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2221      	movs	r2, #33	; 0x21
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b26:	f7fe fe31 	bl	800078c <HAL_GetTick>
 8001b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	88fa      	ldrh	r2, [r7, #6]
 8001b30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	88fa      	ldrh	r2, [r7, #6]
 8001b36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b40:	d108      	bne.n	8001b54 <HAL_UART_Transmit+0x82>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d104      	bne.n	8001b54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	e003      	b.n	8001b5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b64:	e02a      	b.n	8001bbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f870 	bl	8001c56 <UART_WaitOnFlagUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e036      	b.n	8001bee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10b      	bne.n	8001b9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	3302      	adds	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	e007      	b.n	8001bae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	3301      	adds	r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1cf      	bne.n	8001b66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2140      	movs	r1, #64	; 0x40
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f840 	bl	8001c56 <UART_WaitOnFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e006      	b.n	8001bee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e000      	b.n	8001bee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bec:	2302      	movs	r3, #2
  }
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	d11d      	bne.n	8001c4c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_UART_Receive_IT+0x26>
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e016      	b.n	8001c4e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_UART_Receive_IT+0x38>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e00f      	b.n	8001c4e <HAL_UART_Receive_IT+0x58>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f851 	bl	8001cea <UART_Start_Receive_IT>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	e000      	b.n	8001c4e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001c4c:	2302      	movs	r3, #2
  }
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4613      	mov	r3, r2
 8001c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c66:	e02c      	b.n	8001cc2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6e:	d028      	beq.n	8001cc2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c76:	f7fe fd89 	bl	800078c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d21d      	bcs.n	8001cc2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c94:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e00f      	b.n	8001ce2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d0c3      	beq.n	8001c68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	88fa      	ldrh	r2, [r7, #6]
 8001d08:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2222      	movs	r2, #34	; 0x22
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d96:	f023 030c 	bic.w	r3, r3, #12
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a2c      	ldr	r2, [pc, #176]	; (8001e70 <UART_SetConfig+0x114>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d103      	bne.n	8001dcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001dc4:	f7ff fb8c 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	e002      	b.n	8001dd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001dcc:	f7ff fb74 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
 8001dd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	009a      	lsls	r2, r3, #2
 8001ddc:	441a      	add	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <UART_SetConfig+0x118>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	0119      	lsls	r1, r3, #4
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	009a      	lsls	r2, r3, #2
 8001dfc:	441a      	add	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <UART_SetConfig+0x118>)
 8001e0a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2064      	movs	r0, #100	; 0x64
 8001e12:	fb00 f303 	mul.w	r3, r0, r3
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	3332      	adds	r3, #50	; 0x32
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <UART_SetConfig+0x118>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e28:	4419      	add	r1, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	009a      	lsls	r2, r3, #2
 8001e34:	441a      	add	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <UART_SetConfig+0x118>)
 8001e42:	fba3 0302 	umull	r0, r3, r3, r2
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2064      	movs	r0, #100	; 0x64
 8001e4a:	fb00 f303 	mul.w	r3, r0, r3
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	3332      	adds	r3, #50	; 0x32
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <UART_SetConfig+0x118>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	f003 020f 	and.w	r2, r3, #15
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	440a      	add	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40013800 	.word	0x40013800
 8001e74:	51eb851f 	.word	0x51eb851f

08001e78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8a:	2b84      	cmp	r3, #132	; 0x84
 8001e8c:	d005      	beq.n	8001e9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4413      	add	r3, r2
 8001e96:	3303      	adds	r3, #3
 8001e98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001eaa:	f000 fae7 	bl	800247c <vTaskStartScheduler>
  
  return osOK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af04      	add	r7, sp, #16
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d020      	beq.n	8001f08 <osThreadCreate+0x54>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685c      	ldr	r4, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681d      	ldr	r5, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691e      	ldr	r6, [r3, #16]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ffc9 	bl	8001e78 <makeFreeRtosPriority>
 8001ee6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ef0:	9202      	str	r2, [sp, #8]
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	9100      	str	r1, [sp, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4632      	mov	r2, r6
 8001efa:	4629      	mov	r1, r5
 8001efc:	4620      	mov	r0, r4
 8001efe:	f000 f8e8 	bl	80020d2 <xTaskCreateStatic>
 8001f02:	4603      	mov	r3, r0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e01c      	b.n	8001f42 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685c      	ldr	r4, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f14:	b29e      	uxth	r6, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ffab 	bl	8001e78 <makeFreeRtosPriority>
 8001f22:	4602      	mov	r2, r0
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	9200      	str	r2, [sp, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4632      	mov	r2, r6
 8001f30:	4629      	mov	r1, r5
 8001f32:	4620      	mov	r0, r4
 8001f34:	f000 f929 	bl	800218a <xTaskCreate>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <osDelay+0x16>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	e000      	b.n	8001f64 <osDelay+0x18>
 8001f62:	2301      	movs	r3, #1
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fa55 	bl	8002414 <vTaskDelay>
  
  return osOK;
 8001f6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f103 0208 	add.w	r2, r3, #8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f103 0208 	add.w	r2, r3, #8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f103 0208 	add.w	r2, r3, #8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d103      	bne.n	8002030 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	e00c      	b.n	800204a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3308      	adds	r3, #8
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e002      	b.n	800203e <vListInsert+0x2e>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	429a      	cmp	r2, r3
 8002048:	d2f6      	bcs.n	8002038 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6892      	ldr	r2, [r2, #8]
 8002096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6852      	ldr	r2, [r2, #4]
 80020a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d103      	bne.n	80020b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b08e      	sub	sp, #56	; 0x38
 80020d6:	af04      	add	r7, sp, #16
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10a      	bne.n	80020fc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ea:	f383 8811 	msr	BASEPRI, r3
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020f8:	bf00      	nop
 80020fa:	e7fe      	b.n	80020fa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <xTaskCreateStatic+0x46>
	__asm volatile
 8002102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002106:	f383 8811 	msr	BASEPRI, r3
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	61fb      	str	r3, [r7, #28]
}
 8002114:	bf00      	nop
 8002116:	e7fe      	b.n	8002116 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002118:	23b4      	movs	r3, #180	; 0xb4
 800211a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2bb4      	cmp	r3, #180	; 0xb4
 8002120:	d00a      	beq.n	8002138 <xTaskCreateStatic+0x66>
	__asm volatile
 8002122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002126:	f383 8811 	msr	BASEPRI, r3
 800212a:	f3bf 8f6f 	isb	sy
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	61bb      	str	r3, [r7, #24]
}
 8002134:	bf00      	nop
 8002136:	e7fe      	b.n	8002136 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01e      	beq.n	800217c <xTaskCreateStatic+0xaa>
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800214c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	2202      	movs	r2, #2
 8002152:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002156:	2300      	movs	r3, #0
 8002158:	9303      	str	r3, [sp, #12]
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f850 	bl	8002214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002176:	f000 f8e3 	bl	8002340 <prvAddNewTaskToReadyList>
 800217a:	e001      	b.n	8002180 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002180:	697b      	ldr	r3, [r7, #20]
	}
 8002182:	4618      	mov	r0, r3
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800218a:	b580      	push	{r7, lr}
 800218c:	b08c      	sub	sp, #48	; 0x30
 800218e:	af04      	add	r7, sp, #16
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fe96 	bl	8002ed0 <pvPortMalloc>
 80021a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00e      	beq.n	80021ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80021ac:	20b4      	movs	r0, #180	; 0xb4
 80021ae:	f000 fe8f 	bl	8002ed0 <pvPortMalloc>
 80021b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
 80021c0:	e005      	b.n	80021ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f000 ff48 	bl	8003058 <vPortFree>
 80021c8:	e001      	b.n	80021ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d017      	beq.n	8002204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021dc:	88fa      	ldrh	r2, [r7, #6]
 80021de:	2300      	movs	r3, #0
 80021e0:	9303      	str	r3, [sp, #12]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f80e 	bl	8002214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021f8:	69f8      	ldr	r0, [r7, #28]
 80021fa:	f000 f8a1 	bl	8002340 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	e002      	b.n	800220a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002204:	f04f 33ff 	mov.w	r3, #4294967295
 8002208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800220a:	69bb      	ldr	r3, [r7, #24]
	}
 800220c:	4618      	mov	r0, r3
 800220e:	3720      	adds	r7, #32
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800222c:	3b01      	subs	r3, #1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f023 0307 	bic.w	r3, r3, #7
 800223a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224a:	f383 8811 	msr	BASEPRI, r3
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	617b      	str	r3, [r7, #20]
}
 8002258:	bf00      	nop
 800225a:	e7fe      	b.n	800225a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	e012      	b.n	8002288 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4413      	add	r3, r2
 8002268:	7819      	ldrb	r1, [r3, #0]
 800226a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	3334      	adds	r3, #52	; 0x34
 8002272:	460a      	mov	r2, r1
 8002274:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3301      	adds	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	d9e9      	bls.n	8002262 <prvInitialiseNewTask+0x4e>
 800228e:	e000      	b.n	8002292 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002290:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	2b06      	cmp	r3, #6
 800229e:	d901      	bls.n	80022a4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022a0:	2306      	movs	r3, #6
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	2200      	movs	r2, #0
 80022b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	3304      	adds	r3, #4
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fe79 	bl	8001fb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	3318      	adds	r3, #24
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fe74 	bl	8001fb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	f1c3 0207 	rsb	r2, r3, #7
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	2200      	movs	r2, #0
 80022e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	334c      	adds	r3, #76	; 0x4c
 80022f4:	2260      	movs	r2, #96	; 0x60
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 ffe7 	bl	80032cc <memset>
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <prvInitialiseNewTask+0x120>)
 8002302:	651a      	str	r2, [r3, #80]	; 0x50
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <prvInitialiseNewTask+0x124>)
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	4a0b      	ldr	r2, [pc, #44]	; (800233c <prvInitialiseNewTask+0x128>)
 800230e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	69b8      	ldr	r0, [r7, #24]
 8002316:	f000 fc29 	bl	8002b6c <pxPortInitialiseStack>
 800231a:	4602      	mov	r2, r0
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800232c:	bf00      	nop
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	08003508 	.word	0x08003508
 8002338:	08003528 	.word	0x08003528
 800233c:	080034e8 	.word	0x080034e8

08002340 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002348:	f000 fd00 	bl	8002d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800234c:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <prvAddNewTaskToReadyList+0xb8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <prvAddNewTaskToReadyList+0xb8>)
 8002354:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800235e:	4a27      	ldr	r2, [pc, #156]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002364:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <prvAddNewTaskToReadyList+0xb8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d110      	bne.n	800238e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800236c:	f000 fad2 	bl	8002914 <prvInitialiseTaskLists>
 8002370:	e00d      	b.n	800238e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <prvAddNewTaskToReadyList+0xc0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	429a      	cmp	r2, r3
 8002386:	d802      	bhi.n	800238e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002388:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <prvAddNewTaskToReadyList+0xc4>)
 8002396:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	2201      	movs	r2, #1
 800239e:	409a      	lsls	r2, r3
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <prvAddNewTaskToReadyList+0xc8>)
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <prvAddNewTaskToReadyList+0xcc>)
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f7ff fe02 	bl	8001fca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80023c6:	f000 fcf1 	bl	8002dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <prvAddNewTaskToReadyList+0xc0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00e      	beq.n	80023f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <prvAddNewTaskToReadyList+0xbc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <prvAddNewTaskToReadyList+0xd0>)
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000508 	.word	0x20000508
 80023fc:	20000408 	.word	0x20000408
 8002400:	20000514 	.word	0x20000514
 8002404:	20000524 	.word	0x20000524
 8002408:	20000510 	.word	0x20000510
 800240c:	2000040c 	.word	0x2000040c
 8002410:	e000ed04 	.word	0xe000ed04

08002414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d017      	beq.n	8002456 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <vTaskDelay+0x60>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <vTaskDelay+0x30>
	__asm volatile
 800242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	60bb      	str	r3, [r7, #8]
}
 8002440:	bf00      	nop
 8002442:	e7fe      	b.n	8002442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002444:	f000 f884 	bl	8002550 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002448:	2100      	movs	r1, #0
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fb28 	bl	8002aa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002450:	f000 f88c 	bl	800256c <xTaskResumeAll>
 8002454:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <vTaskDelay+0x64>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000530 	.word	0x20000530
 8002478:	e000ed04 	.word	0xe000ed04

0800247c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800248a:	463a      	mov	r2, r7
 800248c:	1d39      	adds	r1, r7, #4
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd fe5c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002498:	6839      	ldr	r1, [r7, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	9202      	str	r2, [sp, #8]
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	2300      	movs	r3, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2300      	movs	r3, #0
 80024a8:	460a      	mov	r2, r1
 80024aa:	4921      	ldr	r1, [pc, #132]	; (8002530 <vTaskStartScheduler+0xb4>)
 80024ac:	4821      	ldr	r0, [pc, #132]	; (8002534 <vTaskStartScheduler+0xb8>)
 80024ae:	f7ff fe10 	bl	80020d2 <xTaskCreateStatic>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a20      	ldr	r2, [pc, #128]	; (8002538 <vTaskStartScheduler+0xbc>)
 80024b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80024b8:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <vTaskStartScheduler+0xbc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80024c0:	2301      	movs	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e001      	b.n	80024ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d11b      	bne.n	8002508 <vTaskStartScheduler+0x8c>
	__asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	613b      	str	r3, [r7, #16]
}
 80024e2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <vTaskStartScheduler+0xc0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	334c      	adds	r3, #76	; 0x4c
 80024ea:	4a15      	ldr	r2, [pc, #84]	; (8002540 <vTaskStartScheduler+0xc4>)
 80024ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <vTaskStartScheduler+0xc8>)
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <vTaskStartScheduler+0xcc>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <vTaskStartScheduler+0xd0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002502:	f000 fbb1 	bl	8002c68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002506:	e00e      	b.n	8002526 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d10a      	bne.n	8002526 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	60fb      	str	r3, [r7, #12]
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <vTaskStartScheduler+0xa8>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	080034c8 	.word	0x080034c8
 8002534:	080028e5 	.word	0x080028e5
 8002538:	2000052c 	.word	0x2000052c
 800253c:	20000408 	.word	0x20000408
 8002540:	2000003c 	.word	0x2000003c
 8002544:	20000528 	.word	0x20000528
 8002548:	20000514 	.word	0x20000514
 800254c:	2000050c 	.word	0x2000050c

08002550 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <vTaskSuspendAll+0x18>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	4a03      	ldr	r2, [pc, #12]	; (8002568 <vTaskSuspendAll+0x18>)
 800255c:	6013      	str	r3, [r2, #0]
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000530 	.word	0x20000530

0800256c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <xTaskResumeAll+0x114>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10a      	bne.n	8002598 <xTaskResumeAll+0x2c>
	__asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	603b      	str	r3, [r7, #0]
}
 8002594:	bf00      	nop
 8002596:	e7fe      	b.n	8002596 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002598:	f000 fbd8 	bl	8002d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <xTaskResumeAll+0x114>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	4a37      	ldr	r2, [pc, #220]	; (8002680 <xTaskResumeAll+0x114>)
 80025a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <xTaskResumeAll+0x114>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d161      	bne.n	8002672 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025ae:	4b35      	ldr	r3, [pc, #212]	; (8002684 <xTaskResumeAll+0x118>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d05d      	beq.n	8002672 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025b6:	e02e      	b.n	8002616 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <xTaskResumeAll+0x11c>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3318      	adds	r3, #24
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fd5b 	bl	8002080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3304      	adds	r3, #4
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fd56 	bl	8002080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2201      	movs	r2, #1
 80025da:	409a      	lsls	r2, r3
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <xTaskResumeAll+0x120>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	4a2a      	ldr	r2, [pc, #168]	; (800268c <xTaskResumeAll+0x120>)
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4a27      	ldr	r2, [pc, #156]	; (8002690 <xTaskResumeAll+0x124>)
 80025f4:	441a      	add	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3304      	adds	r3, #4
 80025fa:	4619      	mov	r1, r3
 80025fc:	4610      	mov	r0, r2
 80025fe:	f7ff fce4 	bl	8001fca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <xTaskResumeAll+0x128>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <xTaskResumeAll+0x12c>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <xTaskResumeAll+0x11c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1cc      	bne.n	80025b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002624:	f000 fa18 	bl	8002a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <xTaskResumeAll+0x130>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d010      	beq.n	8002656 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002634:	f000 f836 	bl	80026a4 <xTaskIncrementTick>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <xTaskResumeAll+0x12c>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f1      	bne.n	8002634 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <xTaskResumeAll+0x130>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <xTaskResumeAll+0x12c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800265e:	2301      	movs	r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <xTaskResumeAll+0x134>)
 8002664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002672:	f000 fb9b 	bl	8002dac <vPortExitCritical>

	return xAlreadyYielded;
 8002676:	68bb      	ldr	r3, [r7, #8]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000530 	.word	0x20000530
 8002684:	20000508 	.word	0x20000508
 8002688:	200004c8 	.word	0x200004c8
 800268c:	20000510 	.word	0x20000510
 8002690:	2000040c 	.word	0x2000040c
 8002694:	20000408 	.word	0x20000408
 8002698:	2000051c 	.word	0x2000051c
 800269c:	20000518 	.word	0x20000518
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ae:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <xTaskIncrementTick+0x150>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 808d 	bne.w	80027d2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026b8:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <xTaskIncrementTick+0x154>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80026c0:	4a4d      	ldr	r2, [pc, #308]	; (80027f8 <xTaskIncrementTick+0x154>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d120      	bne.n	800270e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80026cc:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <xTaskIncrementTick+0x158>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <xTaskIncrementTick+0x48>
	__asm volatile
 80026d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	603b      	str	r3, [r7, #0]
}
 80026e8:	bf00      	nop
 80026ea:	e7fe      	b.n	80026ea <xTaskIncrementTick+0x46>
 80026ec:	4b43      	ldr	r3, [pc, #268]	; (80027fc <xTaskIncrementTick+0x158>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <xTaskIncrementTick+0x15c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a41      	ldr	r2, [pc, #260]	; (80027fc <xTaskIncrementTick+0x158>)
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4a41      	ldr	r2, [pc, #260]	; (8002800 <xTaskIncrementTick+0x15c>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b40      	ldr	r3, [pc, #256]	; (8002804 <xTaskIncrementTick+0x160>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	4a3f      	ldr	r2, [pc, #252]	; (8002804 <xTaskIncrementTick+0x160>)
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	f000 f9a5 	bl	8002a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800270e:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <xTaskIncrementTick+0x164>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d34d      	bcc.n	80027b4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002718:	4b38      	ldr	r3, [pc, #224]	; (80027fc <xTaskIncrementTick+0x158>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <xTaskIncrementTick+0x82>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <xTaskIncrementTick+0x84>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800272c:	4b36      	ldr	r3, [pc, #216]	; (8002808 <xTaskIncrementTick+0x164>)
 800272e:	f04f 32ff 	mov.w	r2, #4294967295
 8002732:	601a      	str	r2, [r3, #0]
					break;
 8002734:	e03e      	b.n	80027b4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <xTaskIncrementTick+0x158>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d203      	bcs.n	8002756 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800274e:	4a2e      	ldr	r2, [pc, #184]	; (8002808 <xTaskIncrementTick+0x164>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6013      	str	r3, [r2, #0]
						break;
 8002754:	e02e      	b.n	80027b4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	3304      	adds	r3, #4
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc90 	bl	8002080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	3318      	adds	r3, #24
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fc87 	bl	8002080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <xTaskIncrementTick+0x168>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	4a22      	ldr	r2, [pc, #136]	; (800280c <xTaskIncrementTick+0x168>)
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <xTaskIncrementTick+0x16c>)
 8002792:	441a      	add	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3304      	adds	r3, #4
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f7ff fc15 	bl	8001fca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <xTaskIncrementTick+0x170>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d3b4      	bcc.n	8002718 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80027ae:	2301      	movs	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027b2:	e7b1      	b.n	8002718 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <xTaskIncrementTick+0x170>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ba:	4915      	ldr	r1, [pc, #84]	; (8002810 <xTaskIncrementTick+0x16c>)
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d907      	bls.n	80027dc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80027cc:	2301      	movs	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e004      	b.n	80027dc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <xTaskIncrementTick+0x174>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <xTaskIncrementTick+0x174>)
 80027da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <xTaskIncrementTick+0x178>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80027e4:	2301      	movs	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80027e8:	697b      	ldr	r3, [r7, #20]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000530 	.word	0x20000530
 80027f8:	2000050c 	.word	0x2000050c
 80027fc:	200004c0 	.word	0x200004c0
 8002800:	200004c4 	.word	0x200004c4
 8002804:	20000520 	.word	0x20000520
 8002808:	20000528 	.word	0x20000528
 800280c:	20000510 	.word	0x20000510
 8002810:	2000040c 	.word	0x2000040c
 8002814:	20000408 	.word	0x20000408
 8002818:	20000518 	.word	0x20000518
 800281c:	2000051c 	.word	0x2000051c

08002820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002826:	4b29      	ldr	r3, [pc, #164]	; (80028cc <vTaskSwitchContext+0xac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800282e:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <vTaskSwitchContext+0xb0>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002834:	e044      	b.n	80028c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <vTaskSwitchContext+0xb0>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <vTaskSwitchContext+0xb4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800284a:	7afb      	ldrb	r3, [r7, #11]
 800284c:	f1c3 031f 	rsb	r3, r3, #31
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	4921      	ldr	r1, [pc, #132]	; (80028d8 <vTaskSwitchContext+0xb8>)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10a      	bne.n	800287c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	607b      	str	r3, [r7, #4]
}
 8002878:	bf00      	nop
 800287a:	e7fe      	b.n	800287a <vTaskSwitchContext+0x5a>
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <vTaskSwitchContext+0xb8>)
 8002888:	4413      	add	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3308      	adds	r3, #8
 800289e:	429a      	cmp	r2, r3
 80028a0:	d104      	bne.n	80028ac <vTaskSwitchContext+0x8c>
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <vTaskSwitchContext+0xbc>)
 80028b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <vTaskSwitchContext+0xbc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	334c      	adds	r3, #76	; 0x4c
 80028bc:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <vTaskSwitchContext+0xc0>)
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000530 	.word	0x20000530
 80028d0:	2000051c 	.word	0x2000051c
 80028d4:	20000510 	.word	0x20000510
 80028d8:	2000040c 	.word	0x2000040c
 80028dc:	20000408 	.word	0x20000408
 80028e0:	2000003c 	.word	0x2000003c

080028e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80028ec:	f000 f852 	bl	8002994 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <prvIdleTask+0x28>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d9f9      	bls.n	80028ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <prvIdleTask+0x2c>)
 80028fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002908:	e7f0      	b.n	80028ec <prvIdleTask+0x8>
 800290a:	bf00      	nop
 800290c:	2000040c 	.word	0x2000040c
 8002910:	e000ed04 	.word	0xe000ed04

08002914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	e00c      	b.n	800293a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <prvInitialiseTaskLists+0x60>)
 800292c:	4413      	add	r3, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fb20 	bl	8001f74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3301      	adds	r3, #1
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b06      	cmp	r3, #6
 800293e:	d9ef      	bls.n	8002920 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <prvInitialiseTaskLists+0x64>)
 8002942:	f7ff fb17 	bl	8001f74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002946:	480d      	ldr	r0, [pc, #52]	; (800297c <prvInitialiseTaskLists+0x68>)
 8002948:	f7ff fb14 	bl	8001f74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800294c:	480c      	ldr	r0, [pc, #48]	; (8002980 <prvInitialiseTaskLists+0x6c>)
 800294e:	f7ff fb11 	bl	8001f74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002952:	480c      	ldr	r0, [pc, #48]	; (8002984 <prvInitialiseTaskLists+0x70>)
 8002954:	f7ff fb0e 	bl	8001f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002958:	480b      	ldr	r0, [pc, #44]	; (8002988 <prvInitialiseTaskLists+0x74>)
 800295a:	f7ff fb0b 	bl	8001f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <prvInitialiseTaskLists+0x78>)
 8002960:	4a05      	ldr	r2, [pc, #20]	; (8002978 <prvInitialiseTaskLists+0x64>)
 8002962:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <prvInitialiseTaskLists+0x7c>)
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <prvInitialiseTaskLists+0x68>)
 8002968:	601a      	str	r2, [r3, #0]
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000040c 	.word	0x2000040c
 8002978:	20000498 	.word	0x20000498
 800297c:	200004ac 	.word	0x200004ac
 8002980:	200004c8 	.word	0x200004c8
 8002984:	200004dc 	.word	0x200004dc
 8002988:	200004f4 	.word	0x200004f4
 800298c:	200004c0 	.word	0x200004c0
 8002990:	200004c4 	.word	0x200004c4

08002994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800299a:	e019      	b.n	80029d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800299c:	f000 f9d6 	bl	8002d4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <prvCheckTasksWaitingTermination+0x50>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fb67 	bl	8002080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <prvCheckTasksWaitingTermination+0x54>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <prvCheckTasksWaitingTermination+0x54>)
 80029ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <prvCheckTasksWaitingTermination+0x58>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <prvCheckTasksWaitingTermination+0x58>)
 80029c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80029c6:	f000 f9f1 	bl	8002dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f810 	bl	80029f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <prvCheckTasksWaitingTermination+0x58>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e1      	bne.n	800299c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200004dc 	.word	0x200004dc
 80029e8:	20000508 	.word	0x20000508
 80029ec:	200004f0 	.word	0x200004f0

080029f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	334c      	adds	r3, #76	; 0x4c
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fc7b 	bl	80032f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d108      	bne.n	8002a1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fb21 	bl	8003058 <vPortFree>
				vPortFree( pxTCB );
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fb1e 	bl	8003058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002a1c:	e018      	b.n	8002a50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d103      	bne.n	8002a30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fb15 	bl	8003058 <vPortFree>
	}
 8002a2e:	e00f      	b.n	8002a50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d00a      	beq.n	8002a50 <prvDeleteTCB+0x60>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	60fb      	str	r3, [r7, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <prvDeleteTCB+0x5e>
	}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <prvResetNextTaskUnblockTime+0x40>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <prvResetNextTaskUnblockTime+0x14>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <prvResetNextTaskUnblockTime+0x16>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d004      	beq.n	8002a7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <prvResetNextTaskUnblockTime+0x44>)
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002a7a:	e008      	b.n	8002a8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <prvResetNextTaskUnblockTime+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <prvResetNextTaskUnblockTime+0x44>)
 8002a8c:	6013      	str	r3, [r2, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	200004c0 	.word	0x200004c0
 8002a9c:	20000528 	.word	0x20000528

08002aa0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002aaa:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ab0:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fae2 	bl	8002080 <uxListRemove>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10b      	bne.n	8002ada <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2201      	movs	r2, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	4a20      	ldr	r2, [pc, #128]	; (8002b58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ad8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d10a      	bne.n	8002af8 <prvAddCurrentTaskToDelayedList+0x58>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	481a      	ldr	r0, [pc, #104]	; (8002b5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002af2:	f7ff fa6a 	bl	8001fca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002af6:	e026      	b.n	8002b46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d209      	bcs.n	8002b24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f7ff fa77 	bl	8002010 <vListInsert>
}
 8002b22:	e010      	b.n	8002b46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4610      	mov	r0, r2
 8002b32:	f7ff fa6d 	bl	8002010 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d202      	bcs.n	8002b46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002b40:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6013      	str	r3, [r2, #0]
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000050c 	.word	0x2000050c
 8002b54:	20000408 	.word	0x20000408
 8002b58:	20000510 	.word	0x20000510
 8002b5c:	200004f4 	.word	0x200004f4
 8002b60:	200004c4 	.word	0x200004c4
 8002b64:	200004c0 	.word	0x200004c0
 8002b68:	20000528 	.word	0x20000528

08002b6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3b04      	subs	r3, #4
 8002b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0201 	bic.w	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3b04      	subs	r3, #4
 8002b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002b9c:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <pxPortInitialiseStack+0x54>)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3b14      	subs	r3, #20
 8002ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b20      	subs	r3, #32
 8002bb2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	08002bc5 	.word	0x08002bc5

08002bc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <prvTaskExitError+0x54>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d00a      	beq.n	8002bee <prvTaskExitError+0x2a>
	__asm volatile
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	60fb      	str	r3, [r7, #12]
}
 8002bea:	bf00      	nop
 8002bec:	e7fe      	b.n	8002bec <prvTaskExitError+0x28>
	__asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	60bb      	str	r3, [r7, #8]
}
 8002c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002c02:	bf00      	nop
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0fc      	beq.n	8002c04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000038 	.word	0x20000038
 8002c1c:	00000000 	.word	0x00000000

08002c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002c20:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <pxCurrentTCBConst2>)
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	6808      	ldr	r0, [r1, #0]
 8002c26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c2a:	f380 8809 	msr	PSP, r0
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f380 8811 	msr	BASEPRI, r0
 8002c3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002c3e:	4770      	bx	lr

08002c40 <pxCurrentTCBConst2>:
 8002c40:	20000408 	.word	0x20000408
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop

08002c48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002c48:	4806      	ldr	r0, [pc, #24]	; (8002c64 <prvPortStartFirstTask+0x1c>)
 8002c4a:	6800      	ldr	r0, [r0, #0]
 8002c4c:	6800      	ldr	r0, [r0, #0]
 8002c4e:	f380 8808 	msr	MSP, r0
 8002c52:	b662      	cpsie	i
 8002c54:	b661      	cpsie	f
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	df00      	svc	0
 8002c60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002c62:	bf00      	nop
 8002c64:	e000ed08 	.word	0xe000ed08

08002c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c6e:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <xPortStartScheduler+0xd0>)
 8002c70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	22ff      	movs	r2, #255	; 0xff
 8002c7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <xPortStartScheduler+0xd4>)
 8002c94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c96:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <xPortStartScheduler+0xd8>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c9c:	e009      	b.n	8002cb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002c9e:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <xPortStartScheduler+0xd8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <xPortStartScheduler+0xd8>)
 8002ca6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b80      	cmp	r3, #128	; 0x80
 8002cbc:	d0ef      	beq.n	8002c9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <xPortStartScheduler+0xd8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1c3 0307 	rsb	r3, r3, #7
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d00a      	beq.n	8002ce0 <xPortStartScheduler+0x78>
	__asm volatile
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	60bb      	str	r3, [r7, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	e7fe      	b.n	8002cde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <xPortStartScheduler+0xd8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <xPortStartScheduler+0xd8>)
 8002ce8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <xPortStartScheduler+0xd8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cf2:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <xPortStartScheduler+0xd8>)
 8002cf4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <xPortStartScheduler+0xdc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <xPortStartScheduler+0xdc>)
 8002d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <xPortStartScheduler+0xdc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <xPortStartScheduler+0xdc>)
 8002d10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002d16:	f000 f8b9 	bl	8002e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <xPortStartScheduler+0xe0>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002d20:	f7ff ff92 	bl	8002c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002d24:	f7ff fd7c 	bl	8002820 <vTaskSwitchContext>
	prvTaskExitError();
 8002d28:	f7ff ff4c 	bl	8002bc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	e000e400 	.word	0xe000e400
 8002d3c:	20000534 	.word	0x20000534
 8002d40:	20000538 	.word	0x20000538
 8002d44:	e000ed20 	.word	0xe000ed20
 8002d48:	20000038 	.word	0x20000038

08002d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
	__asm volatile
 8002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	607b      	str	r3, [r7, #4]
}
 8002d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <vPortEnterCritical+0x58>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	; (8002da4 <vPortEnterCritical+0x58>)
 8002d6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <vPortEnterCritical+0x58>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10f      	bne.n	8002d98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <vPortEnterCritical+0x5c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <vPortEnterCritical+0x4c>
	__asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	603b      	str	r3, [r7, #0]
}
 8002d94:	bf00      	nop
 8002d96:	e7fe      	b.n	8002d96 <vPortEnterCritical+0x4a>
	}
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000038 	.word	0x20000038
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <vPortExitCritical+0x4c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <vPortExitCritical+0x24>
	__asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	607b      	str	r3, [r7, #4]
}
 8002dcc:	bf00      	nop
 8002dce:	e7fe      	b.n	8002dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <vPortExitCritical+0x4c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <vPortExitCritical+0x4c>)
 8002dd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <vPortExitCritical+0x4c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <vPortExitCritical+0x42>
 8002de2:	2300      	movs	r3, #0
 8002de4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	20000038 	.word	0x20000038
 8002dfc:	00000000 	.word	0x00000000

08002e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002e00:	f3ef 8009 	mrs	r0, PSP
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <pxCurrentTCBConst>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e10:	6010      	str	r0, [r2, #0]
 8002e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002e16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e1a:	f380 8811 	msr	BASEPRI, r0
 8002e1e:	f7ff fcff 	bl	8002820 <vTaskSwitchContext>
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f380 8811 	msr	BASEPRI, r0
 8002e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	6808      	ldr	r0, [r1, #0]
 8002e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e36:	f380 8809 	msr	PSP, r0
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	4770      	bx	lr

08002e40 <pxCurrentTCBConst>:
 8002e40:	20000408 	.word	0x20000408
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	607b      	str	r3, [r7, #4]
}
 8002e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e62:	f7ff fc1f 	bl	80026a4 <xTaskIncrementTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <SysTick_Handler+0x40>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	2300      	movs	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f383 8811 	msr	BASEPRI, r3
}
 8002e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <vPortSetupTimerInterrupt+0x30>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <vPortSetupTimerInterrupt+0x38>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <vPortSetupTimerInterrupt+0x3c>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <vPortSetupTimerInterrupt+0x40>)
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eae:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <vPortSetupTimerInterrupt+0x30>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	e000e010 	.word	0xe000e010
 8002ec0:	e000e018 	.word	0xe000e018
 8002ec4:	2000002c 	.word	0x2000002c
 8002ec8:	10624dd3 	.word	0x10624dd3
 8002ecc:	e000e014 	.word	0xe000e014

08002ed0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002edc:	f7ff fb38 	bl	8002550 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ee0:	4b58      	ldr	r3, [pc, #352]	; (8003044 <pvPortMalloc+0x174>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ee8:	f000 f910 	bl	800310c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002eec:	4b56      	ldr	r3, [pc, #344]	; (8003048 <pvPortMalloc+0x178>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f040 808e 	bne.w	8003016 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01d      	beq.n	8002f3c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002f00:	2208      	movs	r2, #8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d014      	beq.n	8002f3c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f023 0307 	bic.w	r3, r3, #7
 8002f18:	3308      	adds	r3, #8
 8002f1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <pvPortMalloc+0x6c>
	__asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	617b      	str	r3, [r7, #20]
}
 8002f38:	bf00      	nop
 8002f3a:	e7fe      	b.n	8002f3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d069      	beq.n	8003016 <pvPortMalloc+0x146>
 8002f42:	4b42      	ldr	r3, [pc, #264]	; (800304c <pvPortMalloc+0x17c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d864      	bhi.n	8003016 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f4c:	4b40      	ldr	r3, [pc, #256]	; (8003050 <pvPortMalloc+0x180>)
 8002f4e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f50:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <pvPortMalloc+0x180>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f56:	e004      	b.n	8002f62 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d903      	bls.n	8002f74 <pvPortMalloc+0xa4>
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f1      	bne.n	8002f58 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f74:	4b33      	ldr	r3, [pc, #204]	; (8003044 <pvPortMalloc+0x174>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d04b      	beq.n	8003016 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2208      	movs	r2, #8
 8002f84:	4413      	add	r3, r2
 8002f86:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	2308      	movs	r3, #8
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d91f      	bls.n	8002fe0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <pvPortMalloc+0xf8>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	613b      	str	r3, [r7, #16]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad2      	subs	r2, r2, r3
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fda:	69b8      	ldr	r0, [r7, #24]
 8002fdc:	f000 f8f8 	bl	80031d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <pvPortMalloc+0x17c>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	4a18      	ldr	r2, [pc, #96]	; (800304c <pvPortMalloc+0x17c>)
 8002fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <pvPortMalloc+0x17c>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <pvPortMalloc+0x184>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d203      	bcs.n	8003002 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <pvPortMalloc+0x17c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a15      	ldr	r2, [pc, #84]	; (8003054 <pvPortMalloc+0x184>)
 8003000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <pvPortMalloc+0x178>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	431a      	orrs	r2, r3
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003016:	f7ff faa9 	bl	800256c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <pvPortMalloc+0x16a>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	60fb      	str	r3, [r7, #12]
}
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <pvPortMalloc+0x168>
	return pvReturn;
 800303a:	69fb      	ldr	r3, [r7, #28]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3728      	adds	r7, #40	; 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20001144 	.word	0x20001144
 8003048:	20001150 	.word	0x20001150
 800304c:	20001148 	.word	0x20001148
 8003050:	2000113c 	.word	0x2000113c
 8003054:	2000114c 	.word	0x2000114c

08003058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d048      	beq.n	80030fc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800306a:	2308      	movs	r3, #8
 800306c:	425b      	negs	r3, r3
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4413      	add	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <vPortFree+0xac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <vPortFree+0x44>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	60fb      	str	r3, [r7, #12]
}
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <vPortFree+0x62>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	60bb      	str	r3, [r7, #8]
}
 80030b6:	bf00      	nop
 80030b8:	e7fe      	b.n	80030b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <vPortFree+0xac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d019      	beq.n	80030fc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d115      	bne.n	80030fc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <vPortFree+0xac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	43db      	mvns	r3, r3
 80030da:	401a      	ands	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80030e0:	f7ff fa36 	bl	8002550 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <vPortFree+0xb0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	4a06      	ldr	r2, [pc, #24]	; (8003108 <vPortFree+0xb0>)
 80030f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030f2:	6938      	ldr	r0, [r7, #16]
 80030f4:	f000 f86c 	bl	80031d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80030f8:	f7ff fa38 	bl	800256c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80030fc:	bf00      	nop
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20001150 	.word	0x20001150
 8003108:	20001148 	.word	0x20001148

0800310c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003112:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003116:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <prvHeapInit+0xac>)
 800311a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3307      	adds	r3, #7
 800312a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <prvHeapInit+0xac>)
 800313c:	4413      	add	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <prvHeapInit+0xb0>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <prvHeapInit+0xb0>)
 800314c:	2200      	movs	r2, #0
 800314e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4413      	add	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003158:	2208      	movs	r2, #8
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0307 	bic.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <prvHeapInit+0xb4>)
 800316c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <prvHeapInit+0xb4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <prvHeapInit+0xb4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	1ad2      	subs	r2, r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <prvHeapInit+0xb4>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <prvHeapInit+0xb8>)
 800319a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <prvHeapInit+0xbc>)
 80031a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <prvHeapInit+0xc0>)
 80031a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	2000053c 	.word	0x2000053c
 80031bc:	2000113c 	.word	0x2000113c
 80031c0:	20001144 	.word	0x20001144
 80031c4:	2000114c 	.word	0x2000114c
 80031c8:	20001148 	.word	0x20001148
 80031cc:	20001150 	.word	0x20001150

080031d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <prvInsertBlockIntoFreeList+0xa8>)
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e002      	b.n	80031e4 <prvInsertBlockIntoFreeList+0x14>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d8f7      	bhi.n	80031de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4413      	add	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d108      	bne.n	8003212 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	441a      	add	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	441a      	add	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d118      	bne.n	8003258 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <prvInsertBlockIntoFreeList+0xac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d00d      	beq.n	800324e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	441a      	add	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e008      	b.n	8003260 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <prvInsertBlockIntoFreeList+0xac>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e003      	b.n	8003260 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	d002      	beq.n	800326e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	2000113c 	.word	0x2000113c
 800327c:	20001144 	.word	0x20001144

08003280 <__libc_init_array>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	2600      	movs	r6, #0
 8003284:	4d0c      	ldr	r5, [pc, #48]	; (80032b8 <__libc_init_array+0x38>)
 8003286:	4c0d      	ldr	r4, [pc, #52]	; (80032bc <__libc_init_array+0x3c>)
 8003288:	1b64      	subs	r4, r4, r5
 800328a:	10a4      	asrs	r4, r4, #2
 800328c:	42a6      	cmp	r6, r4
 800328e:	d109      	bne.n	80032a4 <__libc_init_array+0x24>
 8003290:	f000 f8e2 	bl	8003458 <_init>
 8003294:	2600      	movs	r6, #0
 8003296:	4d0a      	ldr	r5, [pc, #40]	; (80032c0 <__libc_init_array+0x40>)
 8003298:	4c0a      	ldr	r4, [pc, #40]	; (80032c4 <__libc_init_array+0x44>)
 800329a:	1b64      	subs	r4, r4, r5
 800329c:	10a4      	asrs	r4, r4, #2
 800329e:	42a6      	cmp	r6, r4
 80032a0:	d105      	bne.n	80032ae <__libc_init_array+0x2e>
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a8:	4798      	blx	r3
 80032aa:	3601      	adds	r6, #1
 80032ac:	e7ee      	b.n	800328c <__libc_init_array+0xc>
 80032ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b2:	4798      	blx	r3
 80032b4:	3601      	adds	r6, #1
 80032b6:	e7f2      	b.n	800329e <__libc_init_array+0x1e>
 80032b8:	08003548 	.word	0x08003548
 80032bc:	08003548 	.word	0x08003548
 80032c0:	08003548 	.word	0x08003548
 80032c4:	0800354c 	.word	0x0800354c

080032c8 <__retarget_lock_acquire_recursive>:
 80032c8:	4770      	bx	lr

080032ca <__retarget_lock_release_recursive>:
 80032ca:	4770      	bx	lr

080032cc <memset>:
 80032cc:	4603      	mov	r3, r0
 80032ce:	4402      	add	r2, r0
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d100      	bne.n	80032d6 <memset+0xa>
 80032d4:	4770      	bx	lr
 80032d6:	f803 1b01 	strb.w	r1, [r3], #1
 80032da:	e7f9      	b.n	80032d0 <memset+0x4>

080032dc <cleanup_glue>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	460c      	mov	r4, r1
 80032e0:	6809      	ldr	r1, [r1, #0]
 80032e2:	4605      	mov	r5, r0
 80032e4:	b109      	cbz	r1, 80032ea <cleanup_glue+0xe>
 80032e6:	f7ff fff9 	bl	80032dc <cleanup_glue>
 80032ea:	4621      	mov	r1, r4
 80032ec:	4628      	mov	r0, r5
 80032ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032f2:	f000 b869 	b.w	80033c8 <_free_r>
	...

080032f8 <_reclaim_reent>:
 80032f8:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <_reclaim_reent+0xb4>)
 80032fa:	b570      	push	{r4, r5, r6, lr}
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4604      	mov	r4, r0
 8003300:	4283      	cmp	r3, r0
 8003302:	d051      	beq.n	80033a8 <_reclaim_reent+0xb0>
 8003304:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003306:	b143      	cbz	r3, 800331a <_reclaim_reent+0x22>
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d14a      	bne.n	80033a4 <_reclaim_reent+0xac>
 800330e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003310:	6819      	ldr	r1, [r3, #0]
 8003312:	b111      	cbz	r1, 800331a <_reclaim_reent+0x22>
 8003314:	4620      	mov	r0, r4
 8003316:	f000 f857 	bl	80033c8 <_free_r>
 800331a:	6961      	ldr	r1, [r4, #20]
 800331c:	b111      	cbz	r1, 8003324 <_reclaim_reent+0x2c>
 800331e:	4620      	mov	r0, r4
 8003320:	f000 f852 	bl	80033c8 <_free_r>
 8003324:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003326:	b111      	cbz	r1, 800332e <_reclaim_reent+0x36>
 8003328:	4620      	mov	r0, r4
 800332a:	f000 f84d 	bl	80033c8 <_free_r>
 800332e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003330:	b111      	cbz	r1, 8003338 <_reclaim_reent+0x40>
 8003332:	4620      	mov	r0, r4
 8003334:	f000 f848 	bl	80033c8 <_free_r>
 8003338:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800333a:	b111      	cbz	r1, 8003342 <_reclaim_reent+0x4a>
 800333c:	4620      	mov	r0, r4
 800333e:	f000 f843 	bl	80033c8 <_free_r>
 8003342:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003344:	b111      	cbz	r1, 800334c <_reclaim_reent+0x54>
 8003346:	4620      	mov	r0, r4
 8003348:	f000 f83e 	bl	80033c8 <_free_r>
 800334c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800334e:	b111      	cbz	r1, 8003356 <_reclaim_reent+0x5e>
 8003350:	4620      	mov	r0, r4
 8003352:	f000 f839 	bl	80033c8 <_free_r>
 8003356:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003358:	b111      	cbz	r1, 8003360 <_reclaim_reent+0x68>
 800335a:	4620      	mov	r0, r4
 800335c:	f000 f834 	bl	80033c8 <_free_r>
 8003360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003362:	b111      	cbz	r1, 800336a <_reclaim_reent+0x72>
 8003364:	4620      	mov	r0, r4
 8003366:	f000 f82f 	bl	80033c8 <_free_r>
 800336a:	69a3      	ldr	r3, [r4, #24]
 800336c:	b1e3      	cbz	r3, 80033a8 <_reclaim_reent+0xb0>
 800336e:	4620      	mov	r0, r4
 8003370:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003372:	4798      	blx	r3
 8003374:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003376:	b1b9      	cbz	r1, 80033a8 <_reclaim_reent+0xb0>
 8003378:	4620      	mov	r0, r4
 800337a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800337e:	f7ff bfad 	b.w	80032dc <cleanup_glue>
 8003382:	5949      	ldr	r1, [r1, r5]
 8003384:	b941      	cbnz	r1, 8003398 <_reclaim_reent+0xa0>
 8003386:	3504      	adds	r5, #4
 8003388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800338a:	2d80      	cmp	r5, #128	; 0x80
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	d1f8      	bne.n	8003382 <_reclaim_reent+0x8a>
 8003390:	4620      	mov	r0, r4
 8003392:	f000 f819 	bl	80033c8 <_free_r>
 8003396:	e7ba      	b.n	800330e <_reclaim_reent+0x16>
 8003398:	680e      	ldr	r6, [r1, #0]
 800339a:	4620      	mov	r0, r4
 800339c:	f000 f814 	bl	80033c8 <_free_r>
 80033a0:	4631      	mov	r1, r6
 80033a2:	e7ef      	b.n	8003384 <_reclaim_reent+0x8c>
 80033a4:	2500      	movs	r5, #0
 80033a6:	e7ef      	b.n	8003388 <_reclaim_reent+0x90>
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	bf00      	nop
 80033ac:	2000003c 	.word	0x2000003c

080033b0 <__malloc_lock>:
 80033b0:	4801      	ldr	r0, [pc, #4]	; (80033b8 <__malloc_lock+0x8>)
 80033b2:	f7ff bf89 	b.w	80032c8 <__retarget_lock_acquire_recursive>
 80033b6:	bf00      	nop
 80033b8:	20001154 	.word	0x20001154

080033bc <__malloc_unlock>:
 80033bc:	4801      	ldr	r0, [pc, #4]	; (80033c4 <__malloc_unlock+0x8>)
 80033be:	f7ff bf84 	b.w	80032ca <__retarget_lock_release_recursive>
 80033c2:	bf00      	nop
 80033c4:	20001154 	.word	0x20001154

080033c8 <_free_r>:
 80033c8:	b538      	push	{r3, r4, r5, lr}
 80033ca:	4605      	mov	r5, r0
 80033cc:	2900      	cmp	r1, #0
 80033ce:	d040      	beq.n	8003452 <_free_r+0x8a>
 80033d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033d4:	1f0c      	subs	r4, r1, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bfb8      	it	lt
 80033da:	18e4      	addlt	r4, r4, r3
 80033dc:	f7ff ffe8 	bl	80033b0 <__malloc_lock>
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <_free_r+0x8c>)
 80033e2:	6813      	ldr	r3, [r2, #0]
 80033e4:	b933      	cbnz	r3, 80033f4 <_free_r+0x2c>
 80033e6:	6063      	str	r3, [r4, #4]
 80033e8:	6014      	str	r4, [r2, #0]
 80033ea:	4628      	mov	r0, r5
 80033ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033f0:	f7ff bfe4 	b.w	80033bc <__malloc_unlock>
 80033f4:	42a3      	cmp	r3, r4
 80033f6:	d908      	bls.n	800340a <_free_r+0x42>
 80033f8:	6820      	ldr	r0, [r4, #0]
 80033fa:	1821      	adds	r1, r4, r0
 80033fc:	428b      	cmp	r3, r1
 80033fe:	bf01      	itttt	eq
 8003400:	6819      	ldreq	r1, [r3, #0]
 8003402:	685b      	ldreq	r3, [r3, #4]
 8003404:	1809      	addeq	r1, r1, r0
 8003406:	6021      	streq	r1, [r4, #0]
 8003408:	e7ed      	b.n	80033e6 <_free_r+0x1e>
 800340a:	461a      	mov	r2, r3
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	b10b      	cbz	r3, 8003414 <_free_r+0x4c>
 8003410:	42a3      	cmp	r3, r4
 8003412:	d9fa      	bls.n	800340a <_free_r+0x42>
 8003414:	6811      	ldr	r1, [r2, #0]
 8003416:	1850      	adds	r0, r2, r1
 8003418:	42a0      	cmp	r0, r4
 800341a:	d10b      	bne.n	8003434 <_free_r+0x6c>
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	4401      	add	r1, r0
 8003420:	1850      	adds	r0, r2, r1
 8003422:	4283      	cmp	r3, r0
 8003424:	6011      	str	r1, [r2, #0]
 8003426:	d1e0      	bne.n	80033ea <_free_r+0x22>
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4401      	add	r1, r0
 800342e:	6011      	str	r1, [r2, #0]
 8003430:	6053      	str	r3, [r2, #4]
 8003432:	e7da      	b.n	80033ea <_free_r+0x22>
 8003434:	d902      	bls.n	800343c <_free_r+0x74>
 8003436:	230c      	movs	r3, #12
 8003438:	602b      	str	r3, [r5, #0]
 800343a:	e7d6      	b.n	80033ea <_free_r+0x22>
 800343c:	6820      	ldr	r0, [r4, #0]
 800343e:	1821      	adds	r1, r4, r0
 8003440:	428b      	cmp	r3, r1
 8003442:	bf01      	itttt	eq
 8003444:	6819      	ldreq	r1, [r3, #0]
 8003446:	685b      	ldreq	r3, [r3, #4]
 8003448:	1809      	addeq	r1, r1, r0
 800344a:	6021      	streq	r1, [r4, #0]
 800344c:	6063      	str	r3, [r4, #4]
 800344e:	6054      	str	r4, [r2, #4]
 8003450:	e7cb      	b.n	80033ea <_free_r+0x22>
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	20001158 	.word	0x20001158

08003458 <_init>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	bf00      	nop
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr

08003464 <_fini>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr
